-- Cria a tabela para armazenar as conversas do WhatsApp
CREATE TABLE IF NOT EXISTS public.whatsapp_messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lead_id UUID NOT NULL REFERENCES public.leads(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    sender_jid TEXT NOT NULL,
    message_id TEXT UNIQUE, -- ID da mensagem do WhatsApp para evitar duplicatas
    message_timestamp TIMESTAMPTZ NOT NULL,
    message_type TEXT NOT NULL DEFAULT 'text', -- text, image, audio, video, document
    message_content TEXT, -- Texto da mensagem ou legenda da mídia
    media_url TEXT, -- URL pública do arquivo de mídia no Supabase Storage
    mime_type TEXT, -- O tipo MIME da mídia (ex: image/jpeg)
    is_from_lead BOOLEAN NOT NULL, -- TRUE se a mensagem veio do lead, FALSE se foi enviada pelo CRM
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Habilita o Realtime na tabela
-- (Pode ser necessário dropar a publicação e recriá-la se a tabela já existir)
DO $$
BEGIN
  ALTER PUBLICATION supabase_realtime ADD TABLE public.whatsapp_messages;
EXCEPTION
  WHEN duplicate_object THEN
    -- A tabela já está na publicação, não fazer nada.
END;
$$;
ALTER TABLE public.whatsapp_messages REPLICA IDENTITY FULL;

-- Índices para otimizar as consultas
CREATE INDEX IF NOT EXISTS idx_whatsapp_messages_lead_id ON public.whatsapp_messages(lead_id);
CREATE INDEX IF NOT EXISTS idx_whatsapp_messages_timestamp ON public.whatsapp_messages(message_timestamp);

-- Políticas de Segurança (RLS)
ALTER TABLE public.whatsapp_messages ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Usuários podem gerenciar mensagens dos seus próprios leads" ON public.whatsapp_messages;

CREATE POLICY "Usuários podem gerenciar mensagens dos seus próprios leads"
  ON public.whatsapp_messages
  FOR ALL
  USING (auth.uid() = user_id);

-- Criar bucket para mídia do WhatsApp se não existir
INSERT INTO storage.buckets (id, name, public, avif_autodetection, file_size_limit, allowed_mime_types)
VALUES ('crm-assets', 'crm-assets', true, false, 52428800, ARRAY['image/*', 'video/*', 'audio/*', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'])
ON CONFLICT (id) DO NOTHING;

-- Políticas RLS para Storage (bucket crm-assets)
DROP POLICY IF EXISTS "Usuários autenticados podem fazer upload" ON storage.objects;
DROP POLICY IF EXISTS "Usuários podem ver seus próprios arquivos" ON storage.objects;
DROP POLICY IF EXISTS "Usuários podem deletar seus próprios arquivos" ON storage.objects;

-- Política para INSERT (upload de arquivos)
CREATE POLICY "Usuários autenticados podem fazer upload"
ON storage.objects
FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'crm-assets' AND
  (storage.foldername(name))[1] = (SELECT auth.uid()::text)
);

-- Política para SELECT (visualizar arquivos)
CREATE POLICY "Usuários podem ver seus próprios arquivos"
ON storage.objects
FOR SELECT
TO authenticated
USING (
  bucket_id = 'crm-assets' AND
  (storage.foldername(name))[1] = (SELECT auth.uid()::text)
);

-- Política para DELETE (deletar arquivos)
CREATE POLICY "Usuários podem deletar seus próprios arquivos"
ON storage.objects
FOR DELETE
TO authenticated
USING (
  bucket_id = 'crm-assets' AND
  (storage.foldername(name))[1] = (SELECT auth.uid()::text)
);
